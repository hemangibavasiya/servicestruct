# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
org: hbavasiya
app: tempservice
service: tempservice
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: '2'

custom:
  tableName: 'users-${self:provider.stage}'
  demoTable:
    name: !Ref demoTable
    arn: !GetAtt demoTable.Arn
  bundle:
    linting: false
  # serverless-offline:
  #   # httpsProtocol: "dev-certs"
  #   httpPort: 4000
  #   stageVariables:
  #     foo: "bar"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - logs:CreateLogGroup,
        - logs:CreateLogStream,
        - logs:PutLogEvents,
        - logs:DescribeLogStreams
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
  environment:
      USER_TABLE: ${self:custom.tableName}

# layers:
#   graphQLLayer:
#     path: graphQL_layer
#     description: "graphql Dependencies"

functions:
  demogetapi:
    handler: handlers/demogetapi.demogetapi
    memorySize: 128
    description: It's a demo API
    events:
      - http:
          path: demogetapi
          method: get
  createUser:
    handler: handlers/usersCreate.insertUserDetails
    memorySize: 128
    description: This API for Inserting data on users-dev table.
    events:
      - http:
          path: add/user
          method: post
  graphQLDemo:
    handler: handlers/graphqlDemo.main
    memorySize: 128
    events:
      - http:
          path: /democrud
          method: post
          cors: true
    environment:
      Table_Name: demoTable${self:provider.stage}
    layers:
      - arn:aws:lambda:us-east-1:374136397658:layer:graphQLLayer:3

# resources:
#   Resources:
#     DatabaseTable:
#       UserTable:
#         Type: 'AWS::DynamoDB::Table'
#         Properties:
#           AttributeDefinitions:
#             -
#               AttributeName: id
#               AttributeType: S
#           KeySchema:
#             -
#               AttributeName: id
#               KeyType: HASH
#           ProvisionedThroughput:
#             ReadCapacityUnits: 1
#             WriteCapacityUnits: 1
#           TableName: ${self:custom.tableName}
#       DemoTable:
#         Type: AWS::DynamoDB::Table
#         Properties:
#           TableName: demoTable${self:provider.stage}
#           BillingMode: PAY_PER_REQUEST
#           AttributeDefinitions:
#             - AttributeName: id
#               AttributeType: S
#           KeySchema:
#             - AttributeName: id
#               KeyType: HASH
resources:
      Resources:
        UserTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${self:custom.tableName}
            AttributeDefinitions:
              - AttributeName: id
                AttributeType: S
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        DemoTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: demoTable${self:provider.stage}
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
              - AttributeName: id
                AttributeType: S
            KeySchema:
              - AttributeName: id
                KeyType: HASH
# plugins:
#   - graphql
# plugins:
#   - serverless-offline

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

# functions:
#   hello:
#     handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource: 
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
